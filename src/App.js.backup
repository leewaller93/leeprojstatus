import React, { useState, useEffect, useRef, useCallback } from 'react';
import ReactDOM from 'react-dom';
import Select from 'react-select';
import { CLIENTS, getClientUrl, getAdminUrl } from './clientConfig';

// Test Users Configuration
const TEST_USERS = {
  'lee': {
    password: '1234',
    name: 'Lee',
    role: 'client',
    clientId: 'abc-hospital',
    org: 'ABC Hospital'
  },
  'admin': {
    password: '12345',
    name: 'Administrator',
    role: 'admin',
    org: 'PHG'
  }
};

// PHG Standard Template - Based on demo data
const PHG_STANDARD_TEMPLATE = {
  name: 'PHG Standard',
  description: 'Standard HAS implementation template',
  tasks: [
    { goal: 'General Ledger Review', comments: 'Audit the hospital\'s existing general ledger to verify account balances, identify errors, and ensure GAAP compliance.', execute: 'One-Time' },
    { goal: 'Accrual Process Assessment', comments: 'Evaluate current accrual methods for revenue (e.g., unbilled patient services) and expenses (e.g., utilities, salaries) for accuracy and consistency.', execute: 'One-Time' },
    { goal: 'Chart of Accounts Validation', comments: 'Review and align the hospital\'s chart of accounts to ensure proper categorization for journal entries and financial reporting.', execute: 'One-Time' },
    { goal: 'Prior Period Entry Analysis', comments: 'Examine historical journal entries to identify recurring issues or misclassifications, preparing correcting entries as needed.', execute: 'One-Time' },
    { goal: 'Financial Statement Baseline Review', comments: 'Assess prior financial statements (balance sheet, income statement, cash flow statement) to establish a baseline for ongoing preparation and ensure compliance with GAAP and HIPAA.', execute: 'One-Time' },
    { goal: 'Revenue Accrual Entries', comments: 'Post journal entries for accrued revenue from unbilled patient services, using patient encounter data and estimated insurance reimbursements.', execute: 'Weekly' },
    { goal: 'Expense Accrual Entries', comments: 'Record accrued expenses for incurred but unpaid costs (e.g., utilities, vendor services) based on historical data or pending invoices.', execute: 'Weekly' },
    { goal: 'Cash Receipt Journal Entries', comments: 'Log journal entries for cash receipts from patients or insurers, debiting cash and crediting revenue or accounts receivable.', execute: 'Weekly' },
    { goal: 'Preliminary Journal Review', comments: 'Review weekly journal entries for correct account coding, completeness, and supporting documentation (e.g., payment records).', execute: 'Weekly' },
    { goal: 'Adjusting Entry Corrections', comments: 'Prepare and post adjusting entries to correct errors or discrepancies identified during weekly general ledger reviews.', execute: 'Weekly' },
    { goal: 'Month-End Accrual Finalization', comments: 'Finalize and post accrual entries for revenue (e.g., unbilled procedures, pending claims) and expenses (e.g., salaries, leases) to align with GAAP.', execute: 'Monthly' },
    { goal: 'Depreciation Journal Entries', comments: 'Record monthly depreciation entries for hospital assets (e.g., medical equipment, facilities) using established schedules.', execute: 'Monthly' },
    { goal: 'Prepaid Expense Amortization', comments: 'Post journal entries to amortize prepaid expenses (e.g., insurance, software licenses) over their applicable periods.', execute: 'Monthly' },
    { goal: 'Financial Statement Preparation', comments: 'Prepare monthly financial statements (balance sheet, income statement, cash flow statement) using journal entry data, ensuring accuracy and GAAP compliance.', execute: 'Monthly' },
    { goal: 'Comprehensive Ledger and Financial Review', comments: 'Conduct a detailed review of all monthly journal entries and financial statements, verifying accuracy, accrual integrity, and compliance with GAAP and HIPAA.', execute: 'Monthly' },
    { goal: 'Accrual Reversal Entries', comments: 'Post reversing entries for prior month\'s accruals (e.g., paid invoices, settled claims) to prevent double-counting in the ledger.', execute: 'Monthly' }
  ]
};

// Sample data for ABC Hospital
const ABC_HOSPITAL_DATA = {
  team: [
    { id: 1, username: 'Dr. Sarah Johnson', email: 'sarah.johnson@abchospital.com', org: 'ABC Hospital' },
    { id: 2, username: 'Mike Chen', email: 'mike.chen@abchospital.com', org: 'ABC Hospital' },
    { id: 3, username: 'Lisa Rodriguez', email: 'lisa.rodriguez@abchospital.com', org: 'ABC Hospital' },
    { id: 4, username: 'David Kim', email: 'david.kim@abchospital.com', org: 'ABC Hospital' },
    { id: 5, username: 'Jennifer Smith', email: 'jennifer.smith@phg.com', org: 'PHG' }
  ],
  phases: [
    { id: 1, goal: 'General Ledger Review', need: '2024-02-15', comments: 'Audit ABC Hospital\'s existing general ledger to verify account balances and ensure GAAP compliance.', execute: 'One-Time', stage: 'Outstanding', commentArea: 'Focus on revenue recognition and expense classification', assigned_to: 'Dr. Sarah Johnson' },
    { id: 2, goal: 'Accrual Process Assessment', need: '2024-02-20', comments: 'Evaluate current accrual methods for revenue and expenses for accuracy and consistency.', execute: 'One-Time', stage: 'Review/Discussion', commentArea: 'Review unbilled patient services and pending invoices', assigned_to: 'Mike Chen' },
    { id: 3, goal: 'Chart of Accounts Validation', need: '2024-02-25', comments: 'Review and align ABC Hospital\'s chart of accounts for proper categorization.', execute: 'One-Time', stage: 'In Process', commentArea: 'Ensure proper mapping for financial reporting', assigned_to: 'Lisa Rodriguez' },
    { id: 4, goal: 'Revenue Accrual Entries', need: '2024-02-28', comments: 'Post journal entries for accrued revenue from unbilled patient services.', execute: 'Weekly', stage: 'In Process', commentArea: 'Use patient encounter data and estimated reimbursements', assigned_to: 'Dr. Sarah Johnson' },
    { id: 5, goal: 'Financial Statement Preparation', need: '2024-03-05', comments: 'Prepare monthly financial statements ensuring accuracy and GAAP compliance.', execute: 'Monthly', stage: 'Resolved', commentArea: 'Balance sheet, income statement, and cash flow completed', assigned_to: 'David Kim' }
  ]
};

// Helper functions
function randomDueDateForExecute(execute) {
  const today = new Date();
  const days = execute === 'Monthly' ? 30 : execute === 'Weekly' ? 7 : 14;
  const futureDate = new Date(today.getTime() + days * 24 * 60 * 60 * 1000);
  return futureDate.toISOString().split('T')[0];
}

function generateSamplePhases(team) {
  const phases = [
    { name: 'Outstanding', items: [] },
    { name: 'Review/Discussion', items: [] },
    { name: 'In Process', items: [] },
    { name: 'Resolved', items: [] }
  ];

  const sampleTasks = [
    { goal: 'Design UI/UX', need: randomDueDateForExecute('Monthly'), comments: 'Wireframes needed', execute: 'Monthly', stage: 'Outstanding', commentArea: 'Use Figma', assigned_to: team.length > 0 ? team[0].username : 'team' },
    { goal: 'Plan architecture', need: randomDueDateForExecute('One-Time'), comments: 'Tech stack decision', execute: 'One-Time', stage: 'Review/Discussion', commentArea: 'React + Node.js', assigned_to: team.length > 1 ? team[1].username : 'team' },
    { goal: 'Build frontend', need: randomDueDateForExecute('Weekly'), comments: 'React setup', execute: 'Weekly', stage: 'In Process', commentArea: 'Use Tailwind', assigned_to: team.length > 0 ? team[0].username : 'team' },
    { goal: 'Test core features', need: randomDueDateForExecute('One-Time'), comments: 'User feedback', execute: 'One-Time', stage: 'Resolved', commentArea: 'Internal testers', assigned_to: team.length > 1 ? team[1].username : 'team' }
  ];

  sampleTasks.forEach(task => {
    const phase = phases.find(p => p.name === task.stage);
    if (phase) {
      phase.items.push({ ...task, id: Date.now() + Math.random() });
    }
  });

  return phases;
}

// Get client ID from URL
function getClientId() {
  const urlParams = new URLSearchParams(window.location.search);
  return urlParams.get('client') || 'demo';
}

// Check if admin view
function isAdminView() {
  const urlParams = new URLSearchParams(window.location.search);
  return urlParams.get('admin') === 'true';
}

// Check if testing mode
function isTestMode() {
  const urlParams = new URLSearchParams(window.location.search);
  return urlParams.get('test') === 'true';
}

// Get test role (client or employee)
function getTestRole() {
  const urlParams = new URLSearchParams(window.location.search);
  return urlParams.get('role') || 'client';
}

// Login Component
function LoginPage({ onLogin }) {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');

  const handleLogin = (e) => {
    e.preventDefault();
    setError('');

    const user = TEST_USERS[username.toLowerCase()];
    if (!user) {
      setError('Invalid username');
      return;
    }

    if (user.password !== password) {
      setError('Invalid password');
      return;
    }

    onLogin(user);
  };

  return (
    <div style={{ 
      minHeight: '100vh', 
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      padding: '20px'
    }}>
      <div style={{
        background: 'white',
        borderRadius: '20px',
        padding: '40px',
        boxShadow: '0 20px 40px rgba(0,0,0,0.1)',
        maxWidth: '400px',
        width: '100%',
        textAlign: 'center'
      }}>
        {/* PHG Logo */}
        <div style={{ marginBottom: '30px' }}>
          <img
            src={process.env.PUBLIC_URL + "/partners-logo.png"}
            alt="Partners Healthcare Group Logo"
            style={{ width: 200, height: 'auto', marginBottom: '20px' }}
          />
          <h1 style={{ 
            fontSize: '28px', 
            fontWeight: 'bold', 
            color: '#1f2937',
            margin: '0 0 10px 0'
          }}>
            Welcome to PHG HAS Status
          </h1>
          <p style={{ 
            color: '#6b7280', 
            fontSize: '16px',
            margin: '0 0 30px 0'
          }}>
            Hospital Accounting System Status Report
          </p>
        </div>

        {/* Generic Hospital Graphic */}
        <div style={{
          fontSize: '4em',
          marginBottom: '30px',
          color: '#667eea'
        }}>
          🏥
        </div>

        {/* Login Form */}
        <form onSubmit={handleLogin} style={{ textAlign: 'left' }}>
          <div style={{ marginBottom: '20px' }}>
            <label style={{ 
              display: 'block', 
              marginBottom: '8px', 
              fontWeight: 'bold',
              color: '#374151'
            }}>
              Username
            </label>
            <input
              type="text"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              style={{
                width: '100%',
                padding: '12px',
                borderRadius: '8px',
                border: '2px solid #e5e7eb',
                fontSize: '16px',
                boxSizing: 'border-box'
              }}
              placeholder="Enter username"
              required
            />
          </div>

          <div style={{ marginBottom: '30px' }}>
            <label style={{ 
              display: 'block', 
              marginBottom: '8px', 
              fontWeight: 'bold',
              color: '#374151'
            }}>
              Password
            </label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              style={{
                width: '100%',
                padding: '12px',
                borderRadius: '8px',
                border: '2px solid #e5e7eb',
                fontSize: '16px',
                boxSizing: 'border-box'
              }}
              placeholder="Enter password"
              required
            />
          </div>

          {error && (
            <div style={{
              background: '#fee2e2',
              color: '#dc2626',
              padding: '12px',
              borderRadius: '8px',
              marginBottom: '20px',
              fontSize: '14px'
            }}>
              {error}
            </div>
          )}

          <button
            type="submit"
            style={{
              width: '100%',
              background: '#667eea',
              color: 'white',
              padding: '14px',
              borderRadius: '8px',
              border: 'none',
              fontSize: '16px',
              fontWeight: 'bold',
              cursor: 'pointer',
              transition: 'background 0.2s'
            }}
            onMouseEnter={(e) => e.target.style.background = '#5a67d8'}
            onMouseLeave={(e) => e.target.style.background = '#667eea'}
          >
            Sign In
          </button>
        </form>

        {/* Test Credentials */}
        <div style={{
          marginTop: '30px',
          padding: '20px',
          background: '#f8f9fa',
          borderRadius: '8px',
          fontSize: '14px',
          color: '#6b7280'
        }}>
          <h4 style={{ margin: '0 0 10px 0', color: '#374151' }}>Test Credentials:</h4>
          <div style={{ marginBottom: '8px' }}>
            <strong>Client:</strong> lee / 1234
          </div>
          <div>
            <strong>Admin:</strong> admin / 12345
          </div>
        </div>
      </div>
    </div>
  );
}

// Testing Dashboard Component
function TestDashboard() {
  const [selectedView, setSelectedView] = useState(getTestRole());

  const switchToView = (view) => {
    setSelectedView(view);
    // Update URL without page reload
    const url = new URL(window.location);
    url.searchParams.set('role', view);
    window.history.pushState({}, '', url);
  };

  return (
    <div style={{ padding: '20px', maxWidth: '1200px', margin: '0 auto' }}>
      <div style={{ 
        background: 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)', 
        color: 'white', 
        padding: '30px', 
        borderRadius: '15px', 
        marginBottom: '30px',
        textAlign: 'center'
      }}>
        <h1 style={{ margin: '0 0 10px 0', fontSize: '2.5em' }}>🧪 Testing Mode</h1>
        <h2 style={{ margin: '0', fontSize: '1.5em', opacity: 0.9 }}>Switch between Client and Employee Views</h2>
      </div>

      {/* Role Switcher */}
      <div style={{ 
        background: 'white', 
        padding: '20px', 
        borderRadius: '15px', 
        marginBottom: '30px',
        boxShadow: '0 4px 15px rgba(0,0,0,0.1)',
        textAlign: 'center'
      }}>
        <h3 style={{ margin: '0 0 20px 0', color: '#374151' }}>🎭 Switch Role</h3>
        <div style={{ display: 'flex', gap: '15px', justifyContent: 'center', flexWrap: 'wrap' }}>
          <button 
            onClick={() => switchToView('client')}
            style={{
              background: selectedView === 'client' ? '#3b82f6' : '#e5e7eb',
              color: selectedView === 'client' ? 'white' : '#374151',
              border: 'none',
              padding: '12px 24px',
              borderRadius: '8px',
              cursor: 'pointer',
              fontSize: '16px',
              fontWeight: 'bold',
              transition: 'all 0.2s'
            }}
          >
            👤 Client View
          </button>
          <button 
            onClick={() => switchToView('employee')}
            style={{
              background: selectedView === 'employee' ? '#10b981' : '#e5e7eb',
              color: selectedView === 'employee' ? 'white' : '#374151',
              border: 'none',
              padding: '12px 24px',
              borderRadius: '8px',
              cursor: 'pointer',
              fontSize: '16px',
              fontWeight: 'bold',
              transition: 'all 0.2s'
            }}
          >
            👥 Employee View
          </button>
        </div>
      </div>

      {/* Current View Display */}
      <div style={{ 
        background: 'white', 
        padding: '20px', 
        borderRadius: '15px', 
        marginBottom: '30px',
        boxShadow: '0 4px 15px rgba(0,0,0,0.1)'
      }}>
        <h3 style={{ margin: '0 0 15px 0', color: '#374151' }}>
          {selectedView === 'client' ? '👤 Client View' : '👥 Employee View'}
        </h3>
        
        {selectedView === 'client' ? (
          <div>
            <p style={{ color: '#6b7280', marginBottom: '15px' }}>
              <strong>What a client sees:</strong> Only their specific status report with their hospital branding.
            </p>
            <div style={{ 
              background: `linear-gradient(135deg, ${CLIENTS[getClientId()]?.color || '#2563eb'} 0%, ${CLIENTS[getClientId()]?.color || '#2563eb'}dd 100%)`, 
              color: 'white', 
              padding: '20px', 
              borderRadius: '10px',
              marginBottom: '15px'
            }}>
              <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>
                <span style={{ fontSize: '2em' }}>{CLIENTS[getClientId()]?.logo || '🏥'}</span>
                <div>
                  <h4 style={{ margin: '0', fontSize: '20px' }}>{CLIENTS[getClientId()]?.name || 'Demo Hospital'}</h4>
                  <p style={{ margin: '5px 0 0 0', opacity: 0.9 }}>HAS Status Report</p>
                </div>
              </div>
            </div>
            <p style={{ color: '#6b7280', fontSize: '14px' }}>
              <strong>URL:</strong> {getClientUrl(getClientId())}
            </p>
          </div>
        ) : (
          <div>
            <p style={{ color: '#6b7280', marginBottom: '15px' }}>
              <strong>What an employee sees:</strong> Dashboard with all clients to choose from.
            </p>
            <div style={{ 
              display: 'grid', 
              gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', 
              gap: '15px'
            }}>
              {Object.entries(CLIENTS).slice(0, 3).map(([clientId, client]) => (
                <div key={clientId} style={{
                  background: 'white',
                  border: `2px solid ${client.color}`,
                  borderRadius: '10px',
                  padding: '15px',
                  textAlign: 'center'
                }}>
                  <div style={{ fontSize: '2em', marginBottom: '10px' }}>{client.logo}</div>
                  <h4 style={{ margin: '0 0 5px 0', color: client.color }}>{client.name}</h4>
                  <button style={{
                    background: client.color,
                    color: 'white',
                    border: 'none',
                    padding: '8px 16px',
                    borderRadius: '6px',
                    fontSize: '12px',
                    cursor: 'pointer'
                  }}>
                    View Report
                  </button>
                </div>
              ))}
            </div>
            <p style={{ color: '#6b7280', fontSize: '14px', marginTop: '15px' }}>
              <strong>URL:</strong> {getAdminUrl()}
            </p>
          </div>
        )}
      </div>

      {/* Quick Test Links */}
      <div style={{ 
        background: '#f8f9fa', 
        padding: '20px', 
        borderRadius: '10px',
        border: '2px solid #e9ecef'
      }}>
        <h3 style={{ margin: '0 0 15px 0', color: '#495057' }}>🔗 Quick Test Links</h3>
        <div style={{ display: 'flex', gap: '15px', flexWrap: 'wrap' }}>
          <button style={{
            background: '#3b82f6',
            color: 'white',
            border: 'none',
            padding: '10px 16px',
            borderRadius: '6px',
            cursor: 'pointer',
            fontSize: '14px'
          }}
          onClick={() => window.open(getClientUrl('st-marys'), '_blank')}>
            Test St. Mary's Client View
          </button>
          <button style={{
            background: '#10b981',
            color: 'white',
            border: 'none',
            padding: '10px 16px',
            borderRadius: '6px',
            cursor: 'pointer',
            fontSize: '14px'
          }}
          onClick={() => window.open(getAdminUrl(), '_blank')}>
            Test Employee Dashboard
          </button>
          <button style={{
            background: '#6b7280',
            color: 'white',
            border: 'none',
            padding: '10px 16px',
            borderRadius: '6px',
            cursor: 'pointer',
            fontSize: '14px'
          }}
          onClick={() => window.location.href = window.location.pathname}>
            Exit Test Mode
          </button>
        </div>
      </div>
    </div>
  );
}

// Admin Dashboard Component
function AdminDashboard({ currentUser, onLogout, setCurrentClientId, fetchPhases, fetchTeam, API_BASE_URL, applyPHGStandardTemplateToClient, cloneTemplateFromClient, clearAllTasksForClient }) {
  const [showAddClient, setShowAddClient] = useState(false);
  const [showUploadTemplate, setShowUploadTemplate] = useState(false);
  const [showCloneModal, setShowCloneModal] = useState(false);
  const [availableClients, setAvailableClients] = useState([]);
  const [showAuditTrail, setShowAuditTrail] = useState(false);
  const [auditTrail, setAuditTrail] = useState([]);
  const [newClient, setNewClient] = useState({ 
    id: '', 
    name: '', 
    color: '#2563eb',
    city: '',
    state: '',
    contactPerson: '',
    phoneNumber: ''
  });

  const handleAddClient = async () => {
    if (newClient.id && newClient.name && newClient.city && newClient.state && newClient.contactPerson && newClient.phoneNumber) {
      try {
        // Convert id to clientId for backend
        const clientData = {
          clientId: newClient.id,
          name: newClient.name,
          color: newClient.color,
          city: newClient.city,
          state: newClient.state,
          contactPerson: newClient.contactPerson,
          phoneNumber: newClient.phoneNumber
        };
        
        const response = await fetch(`${API_BASE_URL}/api/clients`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(clientData)
        });
        
        const result = await response.json();
        
        if (response.ok) {
          alert(`New client "${newClient.name}" added successfully!`);
          setNewClient({ 
            id: '', 
            name: '', 
            color: '#2563eb',
            city: '',
            state: '',
            contactPerson: '',
            phoneNumber: ''
          });
          setShowAddClient(false);
          // Refresh the page to show the new client
          window.location.reload();
        } else {
          alert(`Error: ${result.error}`);
        }
      } catch (error) {
        alert('Error saving client. Please try again.');
        console.error('Error:', error);
      }
    } else {
      alert('Please fill in all required fields: Client ID, Name, City, State, Contact Person, and Phone Number.');
    }
  };

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      // In a real app, you'd process the Excel file
      alert(`Template uploaded: ${file.name}. This would import task templates from the Excel file.`);
      setShowUploadTemplate(false);
    }
  };

  const fetchAvailableClients = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/clients`);
      if (response.ok) {
        const clients = await response.json();
        setAvailableClients(clients);
      }
    } catch (error) {
      console.error('Error fetching clients:', error);
    }
  };





  const fetchAuditTrail = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/audit-trail`);
      if (response.ok) {
        const data = await response.json();
        setAuditTrail(data);
      }
    } catch (error) {
      console.error('Error fetching audit trail:', error);
    }
  };

  return (
    <div style={{ padding: '20px', maxWidth: '1200px', margin: '0 auto' }}>
      {/* Header */}
      <div style={{ 
        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', 
        color: 'white', 
        padding: '30px', 
        borderRadius: '15px', 
        marginBottom: '30px',
        textAlign: 'center'
      }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>
            <img
              src={process.env.PUBLIC_URL + "/partners-logo.png"}
              alt="Partners Healthcare Group Logo"
              style={{ width: 120, height: 'auto' }}
            />
            <div>
              <h1 style={{ margin: '0', fontSize: '2.5em' }}>🏥 HAS Status Report</h1>
              <h2 style={{ margin: '0', fontSize: '1.5em', opacity: 0.9 }}>Client Management Dashboard</h2>
            </div>
          </div>
          <div style={{ textAlign: 'right' }}>
            <p style={{ margin: '0 0 5px 0', fontSize: '16px' }}>Welcome, {currentUser.name}</p>
            <p style={{ margin: '0', fontSize: '14px', opacity: 0.9 }}>{currentUser.org}</p>
            <button 
              onClick={onLogout}
              style={{
                background: 'rgba(255,255,255,0.2)',
                color: 'white',
                border: '1px solid rgba(255,255,255,0.3)',
                padding: '8px 16px',
                borderRadius: '8px',
                cursor: 'pointer',
                fontSize: '14px',
                marginTop: '10px'
              }}
            >
              Logout
            </button>
          </div>
        </div>
      </div>

      {/* Client Cards */}
      <div style={{ 
        display: 'grid', 
        gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', 
        gap: '20px',
        marginBottom: '30px'
      }}>
        {Object.entries(CLIENTS).map(([clientId, client]) => (
          <div key={clientId} style={{
            background: 'white',
            border: `3px solid ${client.color}`,
            borderRadius: '15px',
            padding: '25px',
            boxShadow: '0 4px 15px rgba(0,0,0,0.1)',
            transition: 'transform 0.2s, box-shadow 0.2s',
            cursor: 'pointer'
          }}
          onMouseEnter={(e) => {
            e.target.style.transform = 'translateY(-5px)';
            e.target.style.boxShadow = '0 8px 25px rgba(0,0,0,0.15)';
          }}
          onMouseLeave={(e) => {
            e.target.style.transform = 'translateY(0)';
            e.target.style.boxShadow = '0 4px 15px rgba(0,0,0,0.1)';
          }}
          onClick={() => {
            setCurrentClientId(clientId);
            // Load data for the selected client
            fetchPhases();
            fetchTeam();
          }}>
            <div style={{ 
              fontSize: '3em', 
              textAlign: 'center', 
              marginBottom: '15px' 
            }}>
              {client.logo}
            </div>
            <h3 style={{ 
              margin: '0 0 10px 0', 
              color: client.color, 
              fontSize: '1.3em',
              textAlign: 'center'
            }}>
              {client.name}
            </h3>
            <div style={{ 
              textAlign: 'center',
              marginTop: '15px'
            }}>
              <button style={{
                background: client.color,
                color: 'white',
                border: 'none',
                padding: '10px 20px',
                borderRadius: '8px',
                fontSize: '14px',
                cursor: 'pointer',
                fontWeight: 'bold'
              }}>
                View Status Report →
              </button>
            </div>
          </div>
        ))}
      </div>

      {/* Admin Actions */}
      <div style={{ 
        background: '#f8f9fa', 
        padding: '20px', 
        borderRadius: '10px',
        border: '2px solid #e9ecef'
      }}>
        <h3 style={{ margin: '0 0 15px 0', color: '#495057' }}>🔧 Admin Actions</h3>
        <div style={{ display: 'flex', gap: '15px', flexWrap: 'wrap' }}>
          <button style={{
            background: '#28a745',
            color: 'white',
            border: 'none',
            padding: '12px 20px',
            borderRadius: '8px',
            cursor: 'pointer',
            fontSize: '14px'
          }}
          onClick={() => setShowAddClient(true)}>
            ➕ Add New Client
          </button>
          <button style={{
            background: '#17a2b8',
            color: 'white',
            border: 'none',
            padding: '12px 20px',
            borderRadius: '8px',
            cursor: 'pointer',
            fontSize: '14px'
          }}
          onClick={() => setShowUploadTemplate(true)}>
            📊 Upload Task Template
          </button>
          <button style={{
            background: '#6f42c1',
            color: 'white',
            border: 'none',
            padding: '12px 20px',
            borderRadius: '8px',
            cursor: 'pointer',
            fontSize: '14px',
            marginRight: '10px'
          }}
          onClick={() => {
            const clientUrls = Object.entries(CLIENTS).map(([id, client]) => 
              `${client.name}: ${getClientUrl(id)}`
            ).join('\n\n');
            navigator.clipboard.writeText(clientUrls);
            alert('Client URLs copied to clipboard!');
          }}>
            📋 Copy All URLs
          </button>
          <button style={{
            background: '#8b5cf6',
            color: 'white',
            border: 'none',
            padding: '12px 20px',
            borderRadius: '8px',
            cursor: 'pointer',
            fontSize: '14px'
          }}
          onClick={() => {
            setShowAuditTrail(true);
            fetchAuditTrail();
          }}>
            📋 View Audit Trail
          </button>
        </div>
      </div>

      {/* Add Client Modal */}
      {showAddClient && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0,0,0,0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
                     <div style={{
             background: 'white',
             padding: '30px',
             borderRadius: '15px',
             maxWidth: '500px',
             width: '90%'
           }}>
             <h3 style={{ margin: '0 0 20px 0' }}>Add New Client</h3>
             <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px', marginBottom: '15px' }}>
               <div>
                 <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>Client ID:</label>
                 <input
                   type="text"
                   value={newClient.id}
                   onChange={(e) => setNewClient({...newClient, id: e.target.value})}
                   placeholder="e.g., new-hospital"
                   style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}
                 />
               </div>
               <div>
                 <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>Client Name:</label>
                 <input
                   type="text"
                   value={newClient.name}
                   onChange={(e) => setNewClient({...newClient, name: e.target.value})}
                   placeholder="e.g., New Hospital Name"
                   style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}
                 />
               </div>
             </div>
             <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px', marginBottom: '15px' }}>
               <div>
                 <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>City:</label>
                 <input
                   type="text"
                   value={newClient.city}
                   onChange={(e) => setNewClient({...newClient, city: e.target.value})}
                   placeholder="e.g., Boston"
                   style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}
                 />
               </div>
               <div>
                 <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>State:</label>
                 <input
                   type="text"
                   value={newClient.state}
                   onChange={(e) => setNewClient({...newClient, state: e.target.value})}
                   placeholder="e.g., MA"
                   style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}
                 />
               </div>
             </div>
             <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px', marginBottom: '15px' }}>
               <div>
                 <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>Contact Person:</label>
                 <input
                   type="text"
                   value={newClient.contactPerson}
                   onChange={(e) => setNewClient({...newClient, contactPerson: e.target.value})}
                   placeholder="e.g., John Smith"
                   style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}
                 />
               </div>
               <div>
                 <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>Phone Number:</label>
                 <input
                   type="tel"
                   value={newClient.phoneNumber}
                   onChange={(e) => setNewClient({...newClient, phoneNumber: e.target.value})}
                   placeholder="e.g., (555) 123-4567"
                   style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}
                 />
               </div>
             </div>
             <div style={{ marginBottom: '20px' }}>
               <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>Color:</label>
               <input
                 type="color"
                 value={newClient.color}
                 onChange={(e) => setNewClient({...newClient, color: e.target.value})}
                 style={{ width: '100%', height: '40px', borderRadius: '4px', border: '1px solid #ccc' }}
               />
             </div>
            <div style={{ display: 'flex', gap: '10px' }}>
              <button
                onClick={handleAddClient}
                style={{
                  background: '#28a745',
                  color: 'white',
                  border: 'none',
                  padding: '10px 20px',
                  borderRadius: '6px',
                  cursor: 'pointer'
                }}
              >
                Add Client
              </button>
              <button
                onClick={() => setShowAddClient(false)}
                style={{
                  background: '#6c757d',
                  color: 'white',
                  border: 'none',
                  padding: '10px 20px',
                  borderRadius: '6px',
                  cursor: 'pointer'
                }}
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Upload Template Modal */}
      {showUploadTemplate && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0,0,0,0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            background: 'white',
            padding: '30px',
            borderRadius: '15px',
            maxWidth: '400px',
            width: '90%'
          }}>
            <h3 style={{ margin: '0 0 20px 0' }}>Upload Task Template</h3>
            <p style={{ color: '#6b7280', marginBottom: '20px' }}>
              Upload an Excel file (.xlsx) with task templates to import into the system.
            </p>
            <div style={{ marginBottom: '20px' }}>
              <input
                type="file"
                accept=".xlsx,.xls"
                onChange={handleFileUpload}
                style={{ width: '100%', padding: '10px', border: '2px dashed #ccc', borderRadius: '8px' }}
              />
            </div>
            <div style={{ display: 'flex', gap: '10px' }}>
              <button
                onClick={() => setShowUploadTemplate(false)}
                style={{
                  background: '#6c757d',
                  color: 'white',
                  border: 'none',
                  padding: '10px 20px',
                  borderRadius: '6px',
                  cursor: 'pointer'
                }}
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Audit Trail Modal */}
      {showAuditTrail && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0,0,0,0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            background: 'white',
            padding: '30px',
            borderRadius: '15px',
            maxWidth: '800px',
            width: '90%',
            maxHeight: '80vh',
            overflow: 'auto'
          }}>
            <h3 style={{ margin: '0 0 20px 0' }}>Audit Trail</h3>
            <p style={{ color: '#6b7280', marginBottom: '20px' }}>
              Complete history of deletions and reassignments across all clients.
            </p>
            
            {auditTrail.length === 0 ? (
              <p style={{ textAlign: 'center', color: '#6b7280', padding: '40px' }}>
                No audit trail entries found.
              </p>
            ) : (
              <div style={{ maxHeight: '400px', overflow: 'auto' }}>
                {auditTrail.map((entry, index) => (
                  <div key={index} style={{
                    border: '1px solid #e5e7eb',
                    borderRadius: '8px',
                    padding: '15px',
                    marginBottom: '10px',
                    background: '#f9fafb'
                  }}>
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '8px' }}>
                      <strong style={{ color: '#374151' }}>
                        {entry.action === 'delete_team_member' ? '👤 Team Member Deleted' :
                         entry.action === 'delete_task' ? '📋 Task Deleted' :
                         entry.action === 'reassign_tasks' ? '🔄 Tasks Reassigned' : entry.action}
                      </strong>
                      <span style={{ fontSize: '12px', color: '#6b7280' }}>
                        {new Date(entry.timestamp).toLocaleString()}
                      </span>
                    </div>
                    <div style={{ marginBottom: '5px' }}>
                      <strong>Target:</strong> {entry.targetName}
                    </div>
                    <div style={{ marginBottom: '5px' }}>
                      <strong>Client:</strong> {entry.clientId}
                    </div>
                    <div style={{ marginBottom: '5px' }}>
                      <strong>Performed by:</strong> {entry.performedBy}
                    </div>
                    {entry.details && (
                      <div style={{ fontSize: '14px', color: '#6b7280', fontStyle: 'italic' }}>
                        {entry.details}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}
            
            <div style={{ display: 'flex', gap: '10px', marginTop: '20px' }}>
              <button
                onClick={() => setShowAuditTrail(false)}
                style={{
                  background: '#6c757d',
                  color: 'white',
                  border: 'none',
                  padding: '10px 20px',
                  borderRadius: '6px',
                  cursor: 'pointer'
                }}
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Clone Template Modal */}
      {showCloneModal && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0,0,0,0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            background: 'white',
            padding: '30px',
            borderRadius: '15px',
            maxWidth: '500px',
            width: '90%'
          }}>
            <h3 style={{ margin: '0 0 20px 0' }}>Clone Template from Client</h3>
            
            <div style={{ marginBottom: '20px' }}>
              <label style={{ display: 'block', marginBottom: '8px', fontWeight: 'bold' }}>Source Client:</label>
              <select
                id="sourceClient"
                style={{ width: '100%', padding: '10px', borderRadius: '6px', border: '1px solid #ccc' }}
              >
                <option value="">Select source client...</option>
                {availableClients.map(client => (
                  <option key={client.clientId} value={client.clientId}>
                    {client.name} ({client.clientId})
                  </option>
                ))}
              </select>
            </div>
            
            <div style={{ marginBottom: '20px' }}>
              <label style={{ display: 'block', marginBottom: '8px', fontWeight: 'bold' }}>Target Client ID:</label>
              <input
                type="text"
                id="targetClient"
                placeholder="Enter target client ID..."
                style={{ width: '100%', padding: '10px', borderRadius: '6px', border: '1px solid #ccc' }}
              />
            </div>
            
            <div style={{ display: 'flex', gap: '10px', justifyContent: 'flex-end' }}>
              <button
                onClick={() => setShowCloneModal(false)}
                style={{
                  background: '#6c757d',
                  color: 'white',
                  border: 'none',
                  padding: '10px 20px',
                  borderRadius: '6px',
                  cursor: 'pointer'
                }}
              >
                Cancel
              </button>
              <button
                onClick={() => {
                  const sourceClient = document.getElementById('sourceClient').value;
                  const targetClient = document.getElementById('targetClient').value;
                  if (sourceClient && targetClient) {
                    cloneTemplateFromClient(sourceClient, targetClient);
                  } else {
                    alert('Please select source client and enter target client ID.');
                  }
                }}
                style={{
                  background: '#dc2626',
                  color: 'white',
                  border: 'none',
                  padding: '10px 20px',
                  borderRadius: '6px',
                  cursor: 'pointer'
                }}
              >
                Clone Template
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

// Tooltip component
function ExpandingCell({ editable, value, onChange }) {
  // console.log("ExpandingCell rendered");
  const [showPopout, setShowPopout] = useState(false);
  const [editing, setEditing] = useState(false);
  const [editValue, setEditValue] = useState(value);
  const [boxPos, setBoxPos] = useState(null);
  const cellRef = useRef();
  const inputRef = useRef();

  useEffect(() => {
    setEditValue(value);
  }, [value]);

  // Get cell position for pop-out
  useEffect(() => {
    if (showPopout && cellRef.current) {
      const rect = cellRef.current.getBoundingClientRect();
      setBoxPos({
        left: rect.left,
        top: rect.top,
        width: rect.width,
        height: rect.height
      });
    } else if (!showPopout) {
      setBoxPos(null);
    }
  }, [showPopout]);

  // Focus textarea when editing
  useEffect(() => {
    if (editing && inputRef.current) {
      inputRef.current.focus();
    }
  }, [editing]);

  // Save on blur or Enter
  const handleSave = () => {
    if (editValue !== value) {
      onChange && onChange(editValue);
    }
    setEditing(false);
    setShowPopout(false);
  };

  // Pop-out content (normal)
  const popoutContent = (
    <div
      style={{
        background: '#fffbe6',
        border: '2px solid #ffe066',
        borderRadius: 14,
        boxShadow: '0 8px 32px rgba(0,0,0,0.18)',
        zIndex: 999999,
        padding: 22,
        fontSize: 16,
        minWidth: 340,
        maxWidth: 600,
        minHeight: 48,
        maxHeight: 340,
        overflowY: 'auto',
        whiteSpace: 'pre-wrap',
        position: 'fixed',
        left: boxPos ? boxPos.left : '50%',
        top: boxPos ? boxPos.top + (boxPos.height || 0) + 10 : '50%',
        transform: boxPos ? 'none' : 'translate(-50%, -50%)',
        outline: 'none',
        cursor: editing ? 'text' : editable ? 'pointer' : 'default',
        color: '#222',
        transition: 'box-shadow 0.2s',
      }}
      onClick={e => e.stopPropagation()}
      onMouseLeave={() => { if (!editing) setShowPopout(false); }}
      onMouseEnter={() => setShowPopout(true)}
    >
      {editing ? (
        <textarea
          ref={inputRef}
          value={editValue || ''}
          onChange={e => setEditValue(e.target.value)}
          onBlur={handleSave}
          onKeyDown={e => { if (e.key === 'Enter' && !e.shiftKey) { inputRef.current.blur(); e.preventDefault(); } }}
          style={{ width: '100%', minHeight: 48, maxHeight: 240, fontSize: 16, padding: 12, borderRadius: 8, border: '2px solid #ccc', background: '#fff', resize: 'vertical', boxSizing: 'border-box', textAlign: 'left', overflow: 'auto', outline: 'none' }}
        />
      ) : (
        <div
          style={{ width: '100%', minHeight: 48, maxHeight: 240, overflowY: 'auto', cursor: editable ? 'pointer' : 'default', color: editValue ? '#222' : '#aaa', fontSize: 16 }}
          onClick={() => { if (editable) setEditing(true); }}
        >
          {editValue || <span>(No content)</span>}
        </div>
      )}
    </div>
  );

  // Only show pop-out on hover or editing
  const popout = (showPopout || editing) && (boxPos || editing)
    ? ReactDOM.createPortal(popoutContent, document.body)
    : null;

  return (
    <td
      ref={cellRef}
      style={{
        minWidth: 120,
        maxWidth: 180,
        position: 'relative',
        overflow: 'hidden',
        textOverflow: 'ellipsis',
        whiteSpace: 'nowrap',
        cursor: editable ? 'pointer' : 'default',
        background: showPopout || editing ? '#fffbe6' : undefined,
        border: showPopout || editing ? '2px solid #ffe066' : undefined,
        zIndex: showPopout || editing ? 2 : 1,
        transition: 'background 0.18s, border 0.18s',
      }}
      onMouseEnter={() => setShowPopout(true)}
      onMouseLeave={() => { if (!editing) setShowPopout(false); }}
      onClick={() => { if (editable) setEditing(true); }}
    >
      <span style={{ display: 'inline-block', maxWidth: '100%', overflow: 'hidden', textOverflow: 'ellipsis', verticalAlign: 'middle' }}>
        {editValue || <span style={{ color: '#aaa' }}>(No content)</span>}
      </span>
      {popout}
    </td>
  );
}

// LEE RULE: UI edit fix marker - build should show this comment
console.log('LEE RULE: UI edit fix marker - build is live');
// REMOVE ALL localStorage USAGE AND DEMO DATA FALLBACKS
// Set API base URL directly to deployed backend
const API_BASE_URL = 'https://has-status-backend.onrender.com';

function App() {
  
  const [team, setTeam] = useState([]);
  const [phases, setPhases] = useState([]);
  const [email, setEmail] = useState("");
  const [username, setUsername] = useState("");
  const [org, setOrg] = useState("PHG");
  // Set valid defaults for newTask
  const [newTask, setNewTask] = useState({
    phase: "Outstanding",
    goal: "",
    need: "",
    comments: "",
    execute: "Monthly",
    stage: "Outstanding",
    commentArea: "",
    assigned_to: "team"
  });
  const [notWorkingPrompt, setNotWorkingPrompt] = useState(null);
  const [reassignTo, setReassignTo] = useState("");
  const [clientName, setClientName] = useState("");
  const [reassignmentModal, setReassignmentModal] = useState(null);
  const [filterMember, setFilterMember] = useState([]);
  const [filterStatus, setFilterStatus] = useState([]);
  const [sortByStatus, setSortByStatus] = useState(false);
  const [showTemplateUpload, setShowTemplateUpload] = useState(false);
  const [showCloneModal, setShowCloneModal] = useState(false);
  const [availableClients, setAvailableClients] = useState([]);
  const [massUpdateValue, setMassUpdateValue] = useState('');
  const [massUpdateMode, setMassUpdateMode] = useState(''); // 'status' or 'assigned'
  const [selectedTasks, setSelectedTasks] = useState([]);
  const [showTaskCheckboxes, setShowTaskCheckboxes] = useState(false);
  
  // Login state
  const [currentUser, setCurrentUser] = useState(null);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  
  // Multi-tenant state
  const [currentClientId, setCurrentClientId] = useState(getClientId());

  // Helper: fallback to localStorage/demo data if backend fails
  const fetchWithFallback = async (url, options, fallbackFn) => {
    try {
      const res = await fetch(url, options);
      if (!res.ok) throw new Error('Backend unavailable');
      return await res.json();
    } catch (e) {
      console.error("API call failed for", url, e);
      return fallbackFn();
    }
  };

  const fetchPhases = useCallback(async () => {
    const data = await fetchWithFallback(
      `${API_BASE_URL}/api/phases?clientId=${currentClientId}`,
      undefined,
      () => {
        // fallback must be synchronous, so just return empty array or static demo data
        return [];
      }
    );
    // Group by phase name
    const phaseNames = ["Outstanding", "Review/Discussion", "In Process", "Resolved"];
    const grouped = phaseNames.map(name => ({
      name,
      items: data.filter(item => item.stage === name)
    }));
    setPhases(grouped);
  }, [currentClientId]);

  const fetchTeam = useCallback(async () => {
    const data = await fetchWithFallback(
      `${API_BASE_URL}/api/team?clientId=${currentClientId}`,
      undefined,
      () => [
        { id: 1, username: 'John Doe', email: 'john@example.com', org: 'PHG' },
        { id: 2, username: 'Jane Smith', email: 'jane@example.com', org: 'PHG' }
      ]
    );
    setTeam(data);
  }, [currentClientId]);

  useEffect(() => {
    fetchPhases();
    fetchTeam();
  }, [fetchPhases, fetchTeam]);



  // Template functions
  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      // In a real app, you'd process the Excel file
      alert(`Template uploaded: ${file.name}. This would import task templates from the Excel file.`);
      setShowTemplateUpload(false);
    }
  };

  const applyPHGStandardTemplate = async () => {
    try {
      // Check for duplicates
      const shouldCancel = await checkForDuplicateTemplate(currentClientId, PHG_STANDARD_TEMPLATE.tasks);
      if (shouldCancel) {
        return false;
      }
      
      // Get team members for the client
      const teamResponse = await fetch(`${API_BASE_URL}/api/team?clientId=${currentClientId}`);
      const teamMembers = await teamResponse.json();
      
      // Add PHG Standard tasks (don't clear existing)
      const tasks = PHG_STANDARD_TEMPLATE.tasks;
      
      for (const task of tasks) {
        const assigned_to = teamMembers.length > 0 ? teamMembers[Math.floor(Math.random() * teamMembers.length)].username : 'PHG';
        
        await fetch(`${API_BASE_URL}/api/phases?clientId=${currentClientId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            ...task,
            phase: 'Outstanding', // Default to Outstanding
            stage: 'Outstanding', // Default to Outstanding
            commentArea: '',
            assigned_to,
            clientId: currentClientId
          })
        });
      }
      
      alert('PHG Standard template applied successfully!');
      fetchPhases(); // Refresh the phases
      setShowTemplateUpload(false);
      return true;
    } catch (error) {
      console.error('Error applying template:', error);
      alert('Error applying template. Please try again.');
      return false;
    }
  };

  const applyPHGStandardTemplateToClient = async (clientId) => {
    try {
      // Check for duplicates
      const shouldCancel = await checkForDuplicateTemplate(clientId, PHG_STANDARD_TEMPLATE.tasks);
      if (shouldCancel) {
        return false;
      }
      
      // Get team members for the client
      const teamResponse = await fetch(`${API_BASE_URL}/api/team?clientId=${clientId}`);
      const teamMembers = await teamResponse.json();
      
      // Add PHG Standard tasks (don't clear existing)
      const tasks = PHG_STANDARD_TEMPLATE.tasks;
      
      for (const task of tasks) {
        const assigned_to = teamMembers.length > 0 ? teamMembers[Math.floor(Math.random() * teamMembers.length)].username : 'PHG';
        
        await fetch(`${API_BASE_URL}/api/phases?clientId=${clientId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            ...task,
            phase: 'Outstanding', // Default to Outstanding
            stage: 'Outstanding', // Default to Outstanding
            commentArea: '',
            assigned_to,
            clientId
          })
        });
      }
      
      alert('PHG Standard template applied successfully!');
      return true;
    } catch (error) {
      console.error('Error applying template:', error);
      alert('Error applying template. Please try again.');
      return false;
    }
  };

  const fetchAvailableClients = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/clients`);
      if (response.ok) {
        const clients = await response.json();
        setAvailableClients(clients);
      }
    } catch (error) {
      console.error('Error fetching clients:', error);
    }
  };

  const clearAllTasksForClient = async (clientId) => {
    const adminPassword = prompt('Enter admin password to clear all tasks:');
    if (adminPassword !== '12345') { // Using the same password as login
      alert('Incorrect admin password. Operation cancelled.');
      return false;
    }
    
    const confirmClear = window.confirm(`Are you sure you want to clear ALL tasks for client ${clientId}? This action cannot be undone.`);
    if (!confirmClear) {
      return false;
    }
    
    try {
      // Delete all phases for the client
      const response = await fetch(`${API_BASE_URL}/api/phases?clientId=${clientId}&performedBy=${currentUser?.username || 'admin'}`, { 
        method: 'DELETE' 
      });
      
      if (response.ok) {
        const result = await response.json();
        alert(`Successfully cleared ${result.count || 0} tasks for client ${clientId}!`);
        return true;
      } else {
        throw new Error('Failed to clear tasks');
      }
    } catch (error) {
      console.error('Error clearing tasks:', error);
      alert('Error clearing tasks. Please try again.');
      return false;
    }
  };

  const massUpdateTasks = async (clientId, field, value, taskIds = null) => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/phases/mass-update`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          clientId,
          field,
          value,
          taskIds, // If provided, only update specific tasks
          performedBy: currentUser?.username || 'admin'
        })
      });
      
      if (response.ok) {
        const result = await response.json();
        const taskCount = taskIds ? taskIds.length : result.count;
        alert(`Successfully updated ${taskCount} tasks: ${field} = ${value}`);
        fetchPhases(); // Refresh the phases
        return true;
      } else {
        throw new Error('Failed to update tasks');
      }
    } catch (error) {
      console.error('Error mass updating tasks:', error);
      alert('Error updating tasks. Please try again.');
      return false;
    }
  };

  const startMassUpdate = (mode) => {
    setMassUpdateMode(mode);
    setShowTaskCheckboxes(true);
    setSelectedTasks([]);
  };

  const toggleTaskSelection = (taskId) => {
    setSelectedTasks(prev => 
      prev.includes(taskId) 
        ? prev.filter(id => id !== taskId)
        : [...prev, taskId]
    );
  };

  const selectAllTasks = () => {
    const allTaskIds = phases.flatMap(phase => 
      phase.items.map(task => task._id || task.id)
    );
    setSelectedTasks(allTaskIds);
  };

  const clearTaskSelection = () => {
    setSelectedTasks([]);
  };

  const checkForDuplicateTemplate = async (clientId, templateTasks) => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/phases?clientId=${clientId}`);
      const existingTasks = await response.json();
      
      if (existingTasks.length === 0) {
        return false; // No existing tasks, not a duplicate
      }
      
      // Check if any template tasks already exist
      const templateGoals = templateTasks.map(task => task.goal.toLowerCase());
      const existingGoals = existingTasks.map(task => task.goal.toLowerCase());
      
      const duplicates = templateGoals.filter(goal => existingGoals.includes(goal));
      
      if (duplicates.length > 0) {
        const confirmAdd = window.confirm(`You already have some of these tasks. Do you want to add the template again?`);
        return !confirmAdd; // Return true if user cancels
      }
      
      return false;
    } catch (error) {
      console.error('Error checking for duplicates:', error);
      return false;
    }
  };

  const cloneTemplateFromClient = async (sourceClientId, targetClientId) => {
    try {
      // Get source client's tasks
      const sourceResponse = await fetch(`${API_BASE_URL}/api/phases?clientId=${sourceClientId}`);
      const sourceTasks = await sourceResponse.json();
      
      if (sourceTasks.length === 0) {
        alert('Source client has no tasks to clone.');
        return false;
      }
      
      // Check for duplicates
      const shouldCancel = await checkForDuplicateTemplate(targetClientId, sourceTasks);
      if (shouldCancel) {
        return false;
      }
      
      // Get target client's team members
      const targetTeamResponse = await fetch(`${API_BASE_URL}/api/team?clientId=${targetClientId}`);
      const targetTeamMembers = await targetTeamResponse.json();
      
      // Clone tasks to target client (don't clear existing)
      for (const task of sourceTasks) {
        const assigned_to = targetTeamMembers.length > 0 ? targetTeamMembers[Math.floor(Math.random() * targetTeamMembers.length)].username : 'PHG';
        
        await fetch(`${API_BASE_URL}/api/phases?clientId=${targetClientId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            goal: task.goal,
            need: task.need,
            comments: task.comments,
            execute: task.execute,
            stage: 'Outstanding', // Default to Outstanding
            phase: 'Outstanding', // Default to Outstanding
            commentArea: task.commentArea,
            assigned_to,
            clientId: targetClientId
          })
        });
      }
      
      alert(`Successfully cloned ${sourceTasks.length} tasks from ${sourceClientId} to ${targetClientId}!`);
      setShowCloneModal(false);
      return true;
    } catch (error) {
      console.error('Error cloning template:', error);
      alert('Error cloning template. Please try again.');
      return false;
    }
  };

  // Add/edit/delete functions: use backend if available, else localStorage
  const addTeamMember = async () => {
    if (!username || !email || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      alert("Please enter a valid username and email");
      return;
    }
    
    // Set org based on current client - either PHG or the client name
    const clientOrg = CLIENTS[currentClientId]?.name || 'PHG';
    const finalOrg = org === 'PHG' ? 'PHG' : clientOrg;
    
    const body = { username, email, org: finalOrg, clientId: currentClientId };
    const res = await fetchWithFallback(
      `${API_BASE_URL}/api/invite`,
      { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(body) },
      () => ({ ok: false })
    );
    if (res && res.error) {
      alert("Error adding team member: " + res.error);
      return;
    }
    fetchTeam();
    setUsername("");
    setEmail("");
    setOrg("PHG");
  };

  const addNewTask = async () => {
    if (!newTask.goal) {
      alert("Please enter a goal");
      return;
    }
    const taskWithClient = { ...newTask, clientId: currentClientId };
    const res = await fetchWithFallback(
      `${API_BASE_URL}/api/phases`,
      { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(taskWithClient) },
      () => ({ ok: false })
    );
    if (res && res.error) {
      alert("Error adding task: " + res.error);
      return;
    }
    fetchPhases();
    setNewTask({
      phase: "Outstanding",
      goal: "",
      need: "",
      comments: "",
      execute: "Monthly",
      stage: "Outstanding",
      commentArea: "",
      assigned_to: "team"
    });
  };

  const updatePhaseItem = async (id, phase, updatedItem) => {
    // Find the full item from the current phase list
    const allItems = phases.flatMap(p => p.items);
    const original = allItems.find(i => i.id === id || i._id === id);
    if (!original) return;
    const merged = { ...original, ...updatedItem };
    await fetchWithFallback(
      `${API_BASE_URL}/api/phases/${id}`,
      { method: "PUT", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ ...merged, phase: merged.stage || phase }) },
      () => ({ ok: false })
    );
    fetchPhases();
  };

  const deletePhaseItem = async (id) => {
    await fetchWithFallback(
      `${API_BASE_URL}/api/phases/${id}?clientId=${currentClientId}&performedBy=${currentUser?.username || 'admin'}`,
      { method: "DELETE" },
      () => ({ ok: false })
    );
    fetchPhases();
  };

  const handleDeleteMember = async (member) => {
    try {
      // First check if member has assigned tasks
      const response = await fetch(`${API_BASE_URL}/api/team/${member.id || member._id}?clientId=${currentClientId}&performedBy=${currentUser?.username || 'admin'}`);
      
      if (!response.ok) {
        const result = await response.json();
        
        if (response.status === 400 && result.needsReassignment) {
          // Member has assigned tasks, show reassignment modal
          setReassignmentModal({
            member,
            assignedTasks: result.assignedTasks,
            teamMembers: team.filter(t => t.username !== member.username).map(t => t.username)
          });
        } else {
          alert(`Error: ${result.error}`);
        }
      } else {
        alert('Team member deleted successfully.');
        fetchTeam();
      }
    } catch (error) {
      console.error('Error deleting team member:', error);
      alert('Error deleting team member. Please try again.');
    }
  };

  const handleReassignmentConfirm = async () => {
    if (!reassignmentModal) return;
    
    try {
      const reassignResponse = await fetch(
        `${API_BASE_URL}/api/team/${reassignmentModal.member.id || reassignmentModal.member._id}?clientId=${currentClientId}&reassignTo=${reassignTo}&performedBy=${currentUser?.username || 'admin'}`,
        { method: 'DELETE' }
      );
      
      const reassignResult = await reassignResponse.json();
      
      if (reassignResponse.ok) {
        alert(`Team member deleted. ${reassignResult.reassignedTasks} tasks reassigned to ${reassignTo}.`);
        fetchTeam();
        fetchPhases();
        setReassignmentModal(null);
        setReassignTo("");
      } else {
        alert(`Error: ${reassignResult.error}`);
      }
    } catch (error) {
      console.error('Error during reassignment:', error);
      alert('Error during reassignment. Please try again.');
    }
  };

  const handleReassignmentCancel = () => {
    setReassignmentModal(null);
    setReassignTo("");
  };

  const handleNotWorking = (member) => {
    const assignedTasks = phases.flatMap(p => p.items.filter(i => i.assigned_to === member.username));
    setNotWorkingPrompt({ member, tasks: assignedTasks });
    setReassignTo("");
  };

  const confirmNotWorking = async () => {
    if (!notWorkingPrompt) return;
    const res = await fetchWithFallback(
      `${API_BASE_URL}/api/team/${notWorkingPrompt.member.id}/not-working`,
      { method: "PATCH", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ reassign_to: reassignTo }) },
      () => ({ ok: false })
    );
    if (res.ok) {
      fetchPhases();
      fetchTeam();
      setNotWorkingPrompt(null);
    } else {
      alert("Failed to mark as not working");
    }
  };

  const cancelNotWorking = () => setNotWorkingPrompt(null);

  const handleSave = () => {
    saveClientName();
    alert("Client name saved! (Data is now persistent in the backend database.)");
  };

  // Fetch client/hospital name on load
  useEffect(() => {
    // Set client name from CLIENTS configuration
    const currentClient = CLIENTS[currentClientId] || CLIENTS['demo'];
    setClientName(currentClient.name);
    
    // Also try to fetch from project API as fallback
    fetch(`${API_BASE_URL}/api/project`)
      .then(res => res.json())
      .then(data => {
        if (data.name && data.name.trim() !== "") {
          setClientName(data.name);
        }
      })
      .catch(err => console.log("Project API not available, using client config"));
  }, [currentClientId]);

  // Save client/hospital name
  const saveClientName = async () => {
    const res = await fetch(`${API_BASE_URL}/api/project`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ name: clientName })
    });
    const data = await res.json();
    console.log("Save response:", data);
    // Refetch to ensure UI is in sync with backend
    const getRes = await fetch(`${API_BASE_URL}/api/project`);
    const getData = await getRes.json();
    setClientName(getData.name || "");
    alert("Hospital name saved!");
  };

  // Login handler
  const handleLogin = (user) => {
    setCurrentUser(user);
    setIsLoggedIn(true);
    
    if (user.role === 'client') {
      setCurrentClientId(user.clientId);

      // Load ABC Hospital data for Lee
      if (user.clientId === 'abc-hospital') {
        setTeam(ABC_HOSPITAL_DATA.team);
        const phaseNames = ["Outstanding", "Review/Discussion", "In Process", "Resolved"];
        const grouped = phaseNames.map(name => ({
          name,
          items: ABC_HOSPITAL_DATA.phases.filter(item => item.stage === name)
        }));
        setPhases(grouped);
      }

  };

  // Logout handler
  const handleLogout = () => {
    setCurrentUser(null);
    setIsLoggedIn(false);
    setCurrentClientId('demo');
    setTeam([]);
    setPhases([]);

  };

  // Show login page if not logged in
  if (!isLoggedIn) {
    return <LoginPage onLogin={handleLogin} />;
  }

  // Show admin dashboard if admin user and no specific client selected
  if (currentUser.role === 'admin' && currentClientId === 'demo') {
    return <AdminDashboard 
      currentUser={currentUser} 
      onLogout={handleLogout} 
      setCurrentClientId={setCurrentClientId}
      fetchPhases={fetchPhases}
      fetchTeam={fetchTeam}
      API_BASE_URL={API_BASE_URL}
      applyPHGStandardTemplateToClient={applyPHGStandardTemplateToClient}
      cloneTemplateFromClient={cloneTemplateFromClient}
      clearAllTasksForClient={clearAllTasksForClient}
    />;
  }

  // Get current client info
  const currentClient = CLIENTS[currentClientId] || CLIENTS['demo'];

  return (
    <div style={{ background: '#f9fafb', minHeight: '100vh' }}>
      <div style={{ position: 'absolute', top: 16, right: 32, zIndex: 2000 }}>
        <img
          src={process.env.PUBLIC_URL + "/partners-logo.png"}
          alt="Partners Healthcare Group Logo"
          style={{ width: 160, height: 'auto' }}
        />
      </div>
      
      {/* Client Header */}
      <div style={{ 
        background: `linear-gradient(135deg, ${currentClient.color} 0%, ${currentClient.color}dd 100%)`, 
        color: 'white', 
        padding: '20px 32px', 
        marginBottom: '20px',
        borderRadius: '0 0 16px 16px'
      }}>
        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', maxWidth: 900, margin: '0 auto' }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>
            <span style={{ fontSize: '2em' }}>{currentClient.logo}</span>
            <div>
              <h1 style={{ margin: '0', fontSize: '28px', fontWeight: 'bold' }}>{currentClient.name}</h1>
              <p style={{ margin: '5px 0 0 0', opacity: 0.9 }}>HAS Status Report</p>
            </div>
          </div>
          <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>
            <div style={{ textAlign: 'right', marginRight: '10px' }}>
              <p style={{ margin: '0', fontSize: '14px', opacity: 0.9 }}>Welcome, {currentUser.name}</p>
              <p style={{ margin: '0', fontSize: '12px', opacity: 0.8 }}>{currentUser.org}</p>
            </div>
            {currentUser.role === 'admin' && (
              <button 
                onClick={() => {
                  setCurrentClientId('demo');
                  setTeam([]);
                  setPhases([]);
                }}
                style={{
                  background: 'rgba(255,255,255,0.2)',
                  color: 'white',
                  border: '1px solid rgba(255,255,255,0.3)',
                  padding: '8px 16px',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  fontSize: '14px',
                  fontWeight: 'bold'
                }}
              >
                📋 Back to Dashboard
              </button>
            )}
            <button 
              onClick={handleLogout}
              style={{
                background: 'rgba(255,255,255,0.2)',
                color: 'white',
                border: '1px solid rgba(255,255,255,0.3)',
                padding: '8px 16px',
                borderRadius: '8px',
                cursor: 'pointer',
                fontSize: '14px',
                fontWeight: 'bold'
              }}
            >
              Logout
            </button>
          </div>
        </div>
      </div>

      <div style={{ padding: 32, maxWidth: 900, margin: '0 auto', position: 'relative', borderRadius: 16, boxShadow: '0 2px 12px rgba(0,0,0,0.07)' }}>
        <h1 style={{ fontSize: 32, fontWeight: 'bold', marginBottom: 24, textAlign: 'center', letterSpacing: 1, color: '#1f2937' }}>HAS Status</h1>
      
        <div style={{ display: "flex", alignItems: "center", marginBottom: 24, gap: 12 }}>
          <label htmlFor="clientName" style={{ fontWeight: "bold", fontSize: 18 }}>Client Name:</label>
          <input
            id="clientName"
            type="text"
            value={clientName}
            onChange={e => setClientName(e.target.value)}
            onKeyDown={e => { if (e.key === 'Enter') { saveClientName(); } }}
            placeholder="Enter client name..."
            style={{ fontSize: 18, padding: 8, borderRadius: 4, border: "1px solid #ccc", flex: 1 }}
          />
          <button onClick={saveClientName} style={{ fontSize: 16, padding: '8px 16px', borderRadius: 4, background: '#2563eb', color: '#fff', border: 'none', marginLeft: 8 }}>Save</button>
        </div>

        <div style={{ display: "flex", justifyContent: "space-between", alignItems: "flex-start", marginBottom: 8 }}>
          <button
            onClick={handleSave}
            style={{ background: "#22c55e", color: "white", padding: "12px 28px", borderRadius: 8, border: "none", cursor: "pointer", fontSize: 16, fontWeight: "bold", boxShadow: "0 2px 8px rgba(0,0,0,0.10)" }}
          >
            Save
          </button>
        </div>

        <h2 style={{ fontSize: 20, fontWeight: "bold", marginBottom: 8, marginTop: 0 }}>Add Team Member</h2>
        <div style={{ display: "flex", gap: 12, marginBottom: 16, background: "#fff", padding: 16, borderRadius: 8, boxShadow: "0 1px 4px rgba(0,0,0,0.04)" }}>
          <input
            type="text"
            value={username}
            onChange={e => setUsername(e.target.value)}
            onKeyDown={e => { if (e.key === 'Enter') { addTeamMember(); } }}
            placeholder="Username"
            style={{ padding: 8, borderRadius: 4, border: "1px solid #ccc", flex: 1 }}
          />
          <input
            type="email"
            value={email}
            onChange={e => setEmail(e.target.value)}
            onKeyDown={e => { if (e.key === 'Enter') { addTeamMember(); } }}
            placeholder="Email"
            style={{ padding: 8, borderRadius: 4, border: "1px solid #ccc", flex: 1 }}
          />
          <select
            value={org}
            onChange={e => setOrg(e.target.value)}
            style={{ padding: 8, borderRadius: 4, border: "1px solid #ccc" }}
          >
            <option value="PHG">PHG</option>
            <option value={CLIENTS[currentClientId]?.name || 'Client'}>
              {CLIENTS[currentClientId]?.name || 'Client'}
            </option>
          </select>
          <button
            onClick={addTeamMember}
            style={{ background: "#3b82f6", color: "white", padding: "8px 20px", borderRadius: 4, border: "none", cursor: "pointer", fontWeight: "bold" }}
          >
            Add
          </button>
        </div>

        <div style={{ marginBottom: 32, background: "#fff", padding: 16, borderRadius: 8, boxShadow: "0 1px 4px rgba(0,0,0,0.04)" }}>
          <h3 style={{ fontWeight: "bold", marginBottom: 8 }}>Team Members</h3>
          <table style={{ width: "100%", borderCollapse: "collapse" }}>
            <thead>
              <tr style={{ background: "#f3f4f6" }}>
                <th style={{ border: "1px solid #e5e7eb", padding: 8 }}>Username</th>
                <th style={{ border: "1px solid #e5e7eb", padding: 8 }}>Email</th>
                <th style={{ border: "1px solid #e5e7eb", padding: 8 }}>Org</th>
                <th style={{ border: "1px solid #e5e7eb", padding: 8 }}>Actions</th>
              </tr>
            </thead>
            <tbody>
              {team.map(member => {
                const assignedTasks = phases.flatMap(p => p.items.filter(i => i.assigned_to === member.username));
                const canDelete = assignedTasks.length === 0 && !(member.org || "").includes("Not Working");
                const canNotWork = assignedTasks.length > 0 && !(member.org || "").includes("Not Working");
                return (
                  <tr key={member.id}>
                    <td style={{ border: "1px solid #e5e7eb", padding: 8 }}>{member.username}</td>
                    <td style={{ border: "1px solid #e5e7eb", padding: 8 }}>{member.email}</td>
                    <td style={{ border: "1px solid #e5e7eb", padding: 8 }}>{member.org}</td>
                    <td style={{ border: "1px solid #e5e7eb", padding: 8 }}>
                      <button
                        onClick={() => handleDeleteMember(member)}
                        style={{ background: "#ef4444", color: "white", border: "none", borderRadius: 4, padding: "4px 12px", marginRight: 8, cursor: "pointer", fontWeight: "bold" }}
                      >
                        Delete
                      </button>
                      <button
                        onClick={() => handleNotWorking(member)}
                        disabled={!canNotWork}
                        style={{ background: canNotWork ? "#f59e0b" : "#ccc", color: "white", border: "none", borderRadius: 4, padding: "4px 12px", cursor: canNotWork ? "pointer" : "not-allowed", fontWeight: "bold" }}
                      >
                        Not Working
                      </button>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>

        {/* Template Upload Section - Show if no tasks exist */}
        {phases.every(phase => phase.items.length === 0) ? (
          <div style={{ marginBottom: 32, background: "#fff", padding: 20, borderRadius: 8, boxShadow: "0 1px 4px rgba(0,0,0,0.04)" }}>
            <h3 style={{ fontSize: 18, fontWeight: "bold", marginBottom: 16 }}>📋 Task Templates</h3>
            <p style={{ marginBottom: 16, color: '#666' }}>No tasks found. Apply a template to get started:</p>
            
            <div style={{ display: "flex", gap: 12, flexWrap: "wrap" }}>
              <button
                onClick={applyPHGStandardTemplate}
                style={{ 
                  background: "#2563eb", 
                  color: "white", 
                  padding: "12px 20px", 
                  borderRadius: 6, 
                  border: "none", 
                  cursor: "pointer", 
                  fontWeight: "bold",
                  fontSize: 14
                }}
              >
                🏥 Apply PHG Standard Template
              </button>
              
              <button
                onClick={() => {
                  const sourceClient = prompt('Enter source client ID to clone from:');
                  if (sourceClient) {
                    cloneTemplateFromClient(sourceClient, currentClientId);
                    fetchPhases(); // Refresh the phases after cloning
                  }
                }}
                style={{ 
                  background: "#dc2626", 
                  color: "white", 
                  padding: "12px 20px", 
                  borderRadius: 6, 
                  border: "none", 
                  cursor: "pointer", 
                  fontWeight: "bold",
                  fontSize: 14
                }}
              >
                📋 Clone from Another Client
              </button>
              
              <button
                onClick={() => setShowTemplateUpload(true)}
                style={{ 
                  background: "#059669", 
                  color: "white", 
                  padding: "12px 20px", 
                  borderRadius: 6, 
                  border: "none", 
                  cursor: "pointer", 
                  fontWeight: "bold",
                  fontSize: 14
                }}
              >
                📁 Upload Custom Template
              </button>
            </div>
            
            {showTemplateUpload && (
              <div style={{ marginTop: 16, padding: 16, background: "#f9fafb", borderRadius: 6 }}>
                <input
                  type="file"
                  accept=".xlsx,.xls,.csv"
                  onChange={handleFileUpload}
                  style={{ marginBottom: 8 }}
                />
                <button
                  onClick={() => setShowTemplateUpload(false)}
                  style={{ 
                    background: "#6b7280", 
                    color: "white", 
                    padding: "8px 16px", 
                    borderRadius: 4, 
                    border: "none", 
                    cursor: "pointer", 
                    marginLeft: 8
                  }}
                >
                  Cancel
                </button>
              </div>
            )}
          </div>
        ) : null}

        {notWorkingPrompt && (
          <div style={{ position: "fixed", top: 0, left: 0, width: "100vw", height: "100vh", background: "rgba(0,0,0,0.2)", zIndex: 9999, display: "flex", alignItems: "center", justifyContent: "center" }}>
            <div style={{ background: "#fff", padding: 32, borderRadius: 12, boxShadow: "0 2px 12px rgba(0,0,0,0.15)", minWidth: 320 }}>
              <h3 style={{ marginBottom: 16 }}>Reassign all tasks for <b>{notWorkingPrompt.member.username}</b></h3>
              <div style={{ marginBottom: 16 }}>
                <label>Reassign to: </label>
                <select value={reassignTo} onChange={e => setReassignTo(e.target.value)} style={{ padding: 8, borderRadius: 4, border: "1px solid #ccc" }}>
                  <option value="">team</option>
                  {team.filter(m => m.id !== notWorkingPrompt.member.id && !(m.org || "").includes("Not Working")).map(m => (
                    <option key={m.id} value={m.username}>{m.username}</option>
                  ))}
                </select>
              </div>
              <div style={{ display: "flex", gap: 12, justifyContent: "flex-end" }}>
                <button onClick={cancelNotWorking} style={{ background: "#ccc", color: "#222", border: "none", borderRadius: 4, padding: "8px 20px", fontWeight: "bold" }}>Cancel</button>
                <button onClick={confirmNotWorking} style={{ background: "#22c55e", color: "white", border: "none", borderRadius: 4, padding: "8px 20px", fontWeight: "bold" }}>Confirm</button>
              </div>
            </div>
          </div>
        )}

        {reassignmentModal && (
          <div style={{ position: "fixed", top: 0, left: 0, width: "100vw", height: "100vh", background: "rgba(0,0,0,0.2)", zIndex: 9999, display: "flex", alignItems: "center", justifyContent: "center" }}>
            <div style={{ background: "#fff", padding: 32, borderRadius: 12, boxShadow: "0 2px 12px rgba(0,0,0,0.15)", minWidth: 400 }}>
              <h3 style={{ marginBottom: 16 }}>Delete Team Member: <b>{reassignmentModal.member.username}</b></h3>
              <p style={{ marginBottom: 16, color: "#666" }}>
                This team member has {reassignmentModal.assignedTasks.length} assigned tasks that need to be reassigned before deletion.
              </p>
              <div style={{ marginBottom: 16 }}>
                <label style={{ display: "block", fontWeight: "bold", marginBottom: 4 }}>Reassign tasks to:</label>
                <select 
                  value={reassignTo} 
                  onChange={e => setReassignTo(e.target.value)} 
                  style={{ width: "100%", padding: 8, borderRadius: 4, border: "1px solid #ccc" }}
                >
                  <option value="">Select a team member...</option>
                  <option value="unassigned">Unassigned</option>
                  {reassignmentModal.teamMembers.map(member => (
                    <option key={member} value={member}>{member}</option>
                  ))}
                </select>
              </div>
              <div style={{ display: "flex", gap: 12, justifyContent: "flex-end" }}>
                <button onClick={handleReassignmentCancel} style={{ background: "#ccc", color: "#222", border: "none", borderRadius: 4, padding: "8px 20px", fontWeight: "bold" }}>Cancel</button>
                <button 
                  onClick={handleReassignmentConfirm} 
                  disabled={!reassignTo}
                  style={{ 
                    background: reassignTo ? "#dc2626" : "#ccc", 
                    color: "white", 
                    border: "none", 
                    borderRadius: 4, 
                    padding: "8px 20px", 
                    fontWeight: "bold",
                    cursor: reassignTo ? "pointer" : "not-allowed"
                  }}
                >
                  Delete & Reassign
                </button>
              </div>
            </div>
          </div>
        )}



        <div style={{ marginBottom: 32, background: "#fff", padding: 20, borderRadius: 8, boxShadow: "0 1px 4px rgba(0,0,0,0.04)" }}>
          <h3 style={{ fontSize: 18, fontWeight: "bold", marginBottom: 16 }}>Add New Task</h3>
          <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: 16 }}>
            <div>
              <label style={{ display: "block", fontWeight: "bold", marginBottom: 4 }}>Goal:</label>
              <input 
                name="goal" 
                value={newTask.goal} 
                onChange={e => setNewTask(prev => ({ ...prev, goal: e.target.value }))} 
                onKeyDown={e => { if (e.key === 'Enter') { addNewTask(); } }}
                placeholder="Enter task goal..." 
                style={{ width: "100%", padding: 8, borderRadius: 4, border: "1px solid #ccc" }} 
              />
            </div>
            <div>
              <label style={{ display: "block", fontWeight: "bold", marginBottom: 4 }}>ETC Date:</label>
              <input 
                name="need" 
                type="date" 
                value={newTask.need} 
                onChange={e => setNewTask(prev => ({ ...prev, need: e.target.value }))} 
                style={{ width: "100%", padding: 8, borderRadius: 4, border: "1px solid #ccc" }} 
              />
            </div>
            <div style={{ gridColumn: "1 / -1" }}>
              <label style={{ display: "block", fontWeight: "bold", marginBottom: 4 }}>Comments:</label>
              <input 
                name="comments" 
                value={newTask.comments} 
                onChange={e => setNewTask(prev => ({ ...prev, comments: e.target.value }))} 
                onKeyDown={e => { if (e.key === 'Enter') { addNewTask(); } }}
                placeholder="Enter comments..." 
                style={{ width: "100%", padding: 8, borderRadius: 4, border: "1px solid #ccc" }} 
              />
            </div>
            <div>
              <label style={{ display: "block", fontWeight: "bold", marginBottom: 4 }}>Frequency:</label>
              <select 
                name="frequency" 
                value={newTask.execute} 
                onChange={e => setNewTask(prev => ({ ...prev, execute: e.target.value }))} 
                style={{ width: "100%", padding: 8, borderRadius: 4, border: "1px solid #ccc" }}
              >
                <option value="Monthly">Monthly</option>
                <option value="Weekly">Weekly</option>
                <option value="One-Time">One-Time</option>
              </select>
            </div>
            <div>
              <label style={{ display: "block", fontWeight: "bold", marginBottom: 4 }}>Status:</label>
              <select 
                name="stage" 
                value={newTask.stage} 
                onChange={e => setNewTask(prev => ({ ...prev, stage: e.target.value, phase: e.target.value }))} 
                style={{ width: "100%", padding: 8, borderRadius: 4, border: "1px solid #ccc" }}
              >
                <option value="Outstanding">Outstanding</option>
                <option value="Review/Discussion">Review/Discussion</option>
                <option value="In Process">In Process</option>
                <option value="Resolved">Resolved</option>
              </select>
            </div>
            <div>
              <label style={{ display: "block", fontWeight: "bold", marginBottom: 4 }}>Assigned To:</label>
              <select 
                name="assigned_to" 
                value={newTask.assigned_to} 
                onChange={e => setNewTask(prev => ({ ...prev, assigned_to: e.target.value }))} 
                style={{ width: "100%", padding: 8, borderRadius: 4, border: "1px solid #ccc" }}
              >
                <option value="team">team</option>
                {team.map((member) => (
                  <option key={member.id} value={member.username}>{member.username}</option>
                ))}
              </select>
            </div>
            <div>
              <label style={{ display: "block", fontWeight: "bold", marginBottom: 4 }}>Feedback:</label>
              <input 
                name="commentArea" 
                value={newTask.commentArea} 
                onChange={e => setNewTask(prev => ({ ...prev, commentArea: e.target.value }))} 
                onKeyDown={e => { if (e.key === 'Enter') { addNewTask(); } }}
                placeholder="Enter feedback..." 
                style={{ width: "100%", padding: 8, borderRadius: 4, border: "1px solid #ccc" }} 
              />
            </div>
            <div style={{ gridColumn: "1 / -1", textAlign: "center" }}>
              <button 
                onClick={addNewTask} 
                style={{ background: "#22c55e", color: "white", padding: "12px 24px", borderRadius: 4, border: "none", cursor: "pointer", fontWeight: "bold", fontSize: 16 }}
              >
                Add Task
              </button>
            </div>
          </div>
        </div>

        {/* Task Management Section - Show when tasks exist */}
        {phases.some(phase => phase.items.length > 0) && (
          <div style={{ marginBottom: 32, background: "#fff", padding: 20, borderRadius: 8, boxShadow: "0 1px 4px rgba(0,0,0,0.04)" }}>
            <h3 style={{ fontSize: 18, fontWeight: "bold", marginBottom: 16 }}>🗑️ Task Management</h3>
            <p style={{ marginBottom: 16, color: '#666' }}>Manage existing tasks:</p>
            
            <div style={{ display: "flex", gap: 12, flexWrap: "wrap" }}>
              <button
                onClick={() => {
                  const confirmClear = window.confirm(`Are you sure you want to clear ALL tasks for this client? This action cannot be undone.`);
                  if (confirmClear) {
                    clearAllTasksForClient(currentClientId);
                    fetchPhases(); // Refresh the phases after clearing
                  }
                }}
                style={{ 
                  background: "#ef4444", 
                  color: "white", 
                  padding: "12px 20px", 
                  borderRadius: 6, 
                  border: "none", 
                  cursor: "pointer", 
                  fontWeight: "bold",
                  fontSize: 14
                }}
              >
                🗑️ Clear All Tasks
              </button>
              <button
                onClick={() => startMassUpdate('status')}
                style={{ 
                  background: "#2563eb", 
                  color: "white", 
                  padding: "12px 20px", 
                  borderRadius: 6, 
                  border: "none", 
                  cursor: "pointer", 
                  fontWeight: "bold",
                  fontSize: 14
                }}
              >
                🔄 Mass Update Status
              </button>
              <button
                onClick={() => startMassUpdate('assigned')}
                style={{ 
                  background: "#059669", 
                  color: "white", 
                  padding: "12px 20px", 
                  borderRadius: 6, 
                  border: "none", 
                  cursor: "pointer", 
                  fontWeight: "bold",
                  fontSize: 14
                }}
              >
                👥 Mass Update Assigned
              </button>
            </div>
          </div>
        )}

        <div style={{ display: 'flex', gap: 16, alignItems: 'center', marginBottom: 16, flexWrap: 'wrap' }}>
          <div style={{ minWidth: 220 }}>
            <label style={{ fontWeight: 'bold', marginRight: 8, display: 'block' }}>Filter by Owner:</label>
            <Select
              isMulti
              options={team.map(m => ({ value: m.username, label: m.username }))}
              value={team.filter(m => filterMember.includes(m.username)).map(m => ({ value: m.username, label: m.username }))}
              onChange={selected => setFilterMember(selected.map(opt => opt.value))}
              placeholder="Select team members..."
              closeMenuOnSelect={false}
              styles={{ menu: base => ({ ...base, zIndex: 9999 }) }}
            />
          </div>
          <div style={{ minWidth: 220 }}>
            <label style={{ fontWeight: 'bold', marginRight: 8, display: 'block' }}>Filter by Status:</label>
            <Select
              isMulti
              options={[
                { value: 'Outstanding', label: 'Outstanding' },
                { value: 'Review/Discussion', label: 'Review/Discussion' },
                { value: 'In Process', label: 'In Process' },
                { value: 'Resolved', label: 'Resolved' }
              ]}
              value={filterStatus.map(s => ({ value: s, label: s }))}
              onChange={selected => setFilterStatus(selected.map(opt => opt.value))}
              placeholder="Select statuses..."
              closeMenuOnSelect={false}
              styles={{ menu: base => ({ ...base, zIndex: 9999 }) }}
            />
          </div>
          <button 
            onClick={() => setSortByStatus(s => !s)} 
            style={{ padding: '6px 16px', borderRadius: 4, border: '1px solid #ccc', background: '#f3f4f6', fontWeight: 'bold', cursor: 'pointer', height: 40, alignSelf: 'end' }}
          >
            Filter by Status
          </button>
          <button 
            onClick={() => {
              setFilterMember([]);
              setFilterStatus([]);
            }} 
            style={{ padding: '6px 16px', borderRadius: 4, border: '1px solid #ccc', background: '#ef4444', color: 'white', fontWeight: 'bold', cursor: 'pointer', height: 40, alignSelf: 'end' }}
          >
            Clear Filters
          </button>
        </div>

        {phases.map((phase, phaseIdx) => {
          let items = phase.items;
          if (filterMember.length > 0) items = items.filter(i => filterMember.includes(i.assigned_to));
          if (filterStatus.length > 0) items = items.filter(i => filterStatus.includes(i.stage));
          if (sortByStatus) {
            items = [...items].sort((a, b) => a.stage.localeCompare(b.stage));
          }
          if (!items.length) return null;
          return (
            <div key={phase.name} style={{ marginBottom: 32, background: "#fff", borderRadius: 8, boxShadow: "0 1px 4px rgba(0,0,0,0.04)", padding: 20 }}>
              <h2 style={{ fontSize: 20, fontWeight: "bold", marginBottom: 12 }}>{phase.name}</h2>
              
              {showTaskCheckboxes && (
                <div style={{ marginBottom: 16, padding: 12, background: "#f3f4f6", borderRadius: 6, border: "1px solid #e5e7eb" }}>
                  <div style={{ display: "flex", alignItems: "center", gap: 12, marginBottom: 8 }}>
                    <span style={{ fontWeight: "bold", color: "#374151" }}>
                      Mass Update Mode: {massUpdateMode === 'status' ? 'Status' : 'Assigned To'}
                    </span>
                    <span style={{ color: "#6b7280" }}>
                      ({selectedTasks.length} tasks selected)
                    </span>
                  </div>
                  
                  <div style={{ display: "flex", gap: 8, alignItems: "center" }}>
                    <select 
                      value={massUpdateValue} 
                      onChange={e => setMassUpdateValue(e.target.value)}
                      style={{ padding: 6, borderRadius: 4, border: "1px solid #ccc" }}
                    >
                      <option value="">Select new value...</option>
                      {massUpdateMode === 'status' ? (
                        <>
                          <option value="Outstanding">Outstanding</option>
                          <option value="Review/Discussion">Review/Discussion</option>
                          <option value="In Process">In Process</option>
                          <option value="Resolved">Resolved</option>
                        </>
                      ) : (
                        <>
                          <option value="PHG">PHG</option>
                          {team.map(member => (
                            <option key={member.id} value={member.username}>{member.username}</option>
                          ))}
                        </>
                      )}
                    </select>
                    
                    <button
                      onClick={() => {
                        if (massUpdateValue && selectedTasks.length > 0) {
                          const field = massUpdateMode === 'status' ? 'stage' : 'assigned_to';
                          massUpdateTasks(currentClientId, field, massUpdateValue, selectedTasks);
                          setShowTaskCheckboxes(false);
                          setSelectedTasks([]);
                          setMassUpdateValue('');
                          setMassUpdateMode('');
                        } else {
                          alert('Please select tasks and a new value.');
                        }
                      }}
                      disabled={!massUpdateValue || selectedTasks.length === 0}
                      style={{ 
                        padding: "6px 12px", 
                        borderRadius: 4, 
                        border: "none", 
                        background: massUpdateValue && selectedTasks.length > 0 ? "#2563eb" : "#ccc",
                        color: "white", 
                        fontWeight: "bold",
                        cursor: massUpdateValue && selectedTasks.length > 0 ? "pointer" : "not-allowed"
                      }}
                    >
                      Update Selected ({selectedTasks.length})
                    </button>
                    
                    <button
                      onClick={() => {
                        setShowTaskCheckboxes(false);
                        setSelectedTasks([]);
                        setMassUpdateValue('');
                        setMassUpdateMode('');
                      }}
                      style={{ 
                        padding: "6px 12px", 
                        borderRadius: 4, 
                        border: "1px solid #ccc",
                        background: "#fff",
                        color: "#374151", 
                        fontWeight: "bold",
                        cursor: "pointer"
                      }}
                    >
                      Cancel
                    </button>
                  </div>
                </div>
              )}
              <table style={{ width: "100%", borderCollapse: "collapse", border: "1px solid #e5e7eb", background: "#fff" }}>
                <thead>
                  <tr style={{ background: "#f3f4f6" }}>
                    {showTaskCheckboxes && (
                      <th style={{ border: "1px solid #e5e7eb", padding: 8 }}>
                        <input 
                          type="checkbox" 
                          checked={selectedTasks.length === items.length && items.length > 0}
                          onChange={selectedTasks.length === items.length ? clearTaskSelection : selectAllTasks}
                          style={{ transform: 'scale(1.2)' }}
                        />
                      </th>
                    )}
                    <th style={{ border: "1px solid #e5e7eb", padding: 8 }}>Goal</th>
                    <th style={{ border: "1px solid #e5e7eb", padding: 8 }}>ETC Date</th>
                    <th style={{ border: "1px solid #e5e7eb", padding: 8 }}>Comments</th>
                    <th style={{ border: "1px solid #e5e7eb", padding: 8 }}>Frequency</th>
                    <th style={{ border: "1px solid #e5e7eb", padding: 8 }}>Status</th>
                    <th style={{ border: "1px solid #e5e7eb", padding: 8 }}>Feedback</th>
                    <th style={{ border: "1px solid #e5e7eb", padding: 8 }}>Assigned To</th>
                    <th style={{ border: "1px solid #e5e7eb", padding: 8 }}>Delete</th>
                  </tr>
                </thead>
                <tbody>
                  {items.map(item => (
                    <tr key={item._id}>
                      {showTaskCheckboxes && (
                        <td style={{ border: "1px solid #e5e7eb", padding: 8, textAlign: "center" }}>
                          <input 
                            type="checkbox" 
                            checked={selectedTasks.includes(item._id)}
                            onChange={() => toggleTaskSelection(item._id)}
                            style={{ transform: 'scale(1.2)' }}
                          />
                        </td>
                      )}
                      <ExpandingCell
                        editable
                        value={item.goal}
                        onChange={val => updatePhaseItem(item._id, phase.name, { goal: val })}
                      />
                      <td>
                        <input type="date" value={item.need || ""} onChange={e => updatePhaseItem(item._id, phase.name, { need: e.target.value })} />
                      </td>
                      <ExpandingCell
                        editable
                        value={item.comments}
                        onChange={val => updatePhaseItem(item._id, phase.name, { comments: val })}
                      />
                      <td>
                        <select value={item.execute} onChange={e => updatePhaseItem(item._id, phase.name, { execute: e.target.value })}>
                          <option value="Monthly">Monthly</option>
                          <option value="Weekly">Weekly</option>
                          <option value="One-Time">One-Time</option>
                        </select>
                      </td>
                      <td>
                        <select value={item.stage} onChange={e => updatePhaseItem(item._id, phase.name, { stage: e.target.value })}>
                          <option value="Outstanding">Outstanding</option>
                          <option value="Review/Discussion">Review/Discussion</option>
                          <option value="In Process">In Process</option>
                          <option value="Resolved">Resolved</option>
                        </select>
                      </td>
                      <ExpandingCell
                        editable
                        value={item.commentArea}
                        onChange={val => updatePhaseItem(item._id, phase.name, { commentArea: val })}
                      />
                      <td>
                        <select value={item.assigned_to} onChange={e => updatePhaseItem(item._id, phase.name, { assigned_to: e.target.value })}>
                          <option value="team">team</option>
                          {team.map(member => (
                            <option key={member.id} value={member.username}>{member.username}</option>
                          ))}
                        </select>
                      </td>
                      <td>
                        <button onClick={() => deletePhaseItem(item._id)} style={{ background: '#ef4444', color: 'white', border: 'none', borderRadius: 4, padding: '4px 12px', fontWeight: 'bold', cursor: 'pointer' }}>Delete</button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          );
        })}
      </div>
    </div>
  );
}

export default App;